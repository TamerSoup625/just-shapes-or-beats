[gd_scene load_steps=40 format=2]

[ext_resource path="res://scenes/player.gd" type="Script" id=1]
[ext_resource path="res://images/player_square.svg" type="Texture" id=2]
[ext_resource path="res://resources/materials/shader_player_white.tres" type="Material" id=3]
[ext_resource path="res://images/shapes_color.png" type="Texture" id=4]
[ext_resource path="res://images/player_square_inside.svg" type="Texture" id=5]
[ext_resource path="res://scenes/player_rescue_area.gd" type="Script" id=6]
[ext_resource path="res://images/player_mercy_inv_circle.svg" type="Texture" id=7]
[ext_resource path="res://resources/fonts/NexaBold/Nexa Bold.otf" type="DynamicFontData" id=8]
[ext_resource path="res://images/player_dir_mask.svg" type="Texture" id=9]

[sub_resource type="CircleShape2D" id=1]
radius = 0.01

[sub_resource type="Shader" id=10]
code = "shader_type canvas_item;

// Creates the player dash circle

//uniform float dist;
uniform flat sampler2D color_list;

vec4 get_color(float green){
	return texture(color_list, vec2(green, 0));
}

float get_dist(float red){
	return red * 2.0;
}

float distance_to_middle(vec2 uv){
	vec2 center_vec = uv - vec2(0.5);
	return length(center_vec);
}

void fragment(){
	bool must_color = false;
	float middle_dist = distance_to_middle(UV);
	// Imagine waiting for 4.0 to get instance uniform
	// This comment was made by MODULATE and Furcifer gang
	float dist = get_dist(MODULATE.r);
	
	if(middle_dist <= dist * 0.5){must_color = true;}
	if(middle_dist <= dist * 0.5 - 0.5){must_color = false;}
	if(middle_dist >= 0.5){must_color = false;}
	
	if(must_color){
		COLOR = get_color(MODULATE.g);
	} else {
		COLOR = vec4(0);
	}
}"

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 10 )
shader_param/color_list = ExtResource( 4 )

[sub_resource type="Gradient" id=8]
offsets = PoolRealArray(  )
colors = PoolColorArray(  )

[sub_resource type="GradientTexture2D" id=9]
gradient = SubResource( 8 )

[sub_resource type="Shader" id=20]
code = "shader_type canvas_item;

float PI(){
	return 3.1415926535897932384626433833;
}

float TAU(){
	return 6.28318530718;
}

void fragment(){
	COLOR = texture(TEXTURE, UV);
	float sector = MODULATE.g * TAU() - PI();
	float angle = atan(UV.x - 0.5, UV.y - 0.5);
	if(angle >= sector){
		COLOR.a = 0.0;
	}
}"

[sub_resource type="ShaderMaterial" id=21]
shader = SubResource( 20 )

[sub_resource type="Shader" id=15]
code = "shader_type canvas_item;

// Player shader
// Creates the purple hit coloring and represents HP
// If modulate.r is higher than 0.5, then it signals hit
// modulate.g indicates sector

uniform vec4 hit_color: hint_color;

float PI(){
	return 3.1415926535897932384626433833;
}

float TAU(){
	return 6.28318530718;
}

void fragment(){
	vec4 color = texture(TEXTURE, UV);
	float weight = round(MODULATE.r);
	color.rgb = (color.rgb * weight + hit_color.rgb * (1.0 - weight));
	COLOR = color;
	float sector = MODULATE.g * TAU() - PI();
	float angle = atan(UV.x - 0.5, UV.y - 0.5);
	if(angle >= sector){
		COLOR.a = 0.0;
	}
}"

[sub_resource type="ShaderMaterial" id=16]
shader = SubResource( 15 )
shader_param/hit_color = Color( 0.545098, 0, 0.545098, 1 )

[sub_resource type="Gradient" id=18]
colors = PoolColorArray( 1, 1, 1, 1, 1, 1, 1, 0 )

[sub_resource type="GradientTexture2D" id=19]
gradient = SubResource( 18 )
width = 32
height = 32
fill = 1
fill_from = Vector2( 0.5, 0.5 )
fill_to = Vector2( 1, 0.5 )

[sub_resource type="DynamicFont" id=32]
size = 12
font_data = ExtResource( 8 )

[sub_resource type="Gradient" id=13]
colors = PoolColorArray( 1, 1, 1, 1, 1, 1, 1, 0 )

[sub_resource type="GradientTexture" id=14]
gradient = SubResource( 13 )
width = 2

[sub_resource type="ParticlesMaterial" id=12]
flag_disable_z = true
spread = 180.0
gravity = Vector3( 0, 0, 0 )
initial_velocity = 100.0
initial_velocity_random = 0.5
orbit_velocity = 0.0
orbit_velocity_random = 0.0
damping = 50.0
scale = 0.25
color = Color( 1, 1, 1, 0.498039 )
color_ramp = SubResource( 14 )

[sub_resource type="Gradient" id=5]
colors = PoolColorArray( 1, 1, 1, 1, 1, 1, 1, 0 )

[sub_resource type="GradientTexture" id=6]
gradient = SubResource( 5 )
width = 2

[sub_resource type="ParticlesMaterial" id=7]
flag_disable_z = true
direction = Vector3( -1, 0, 0 )
gravity = Vector3( 0, 0, 0 )
initial_velocity = 50.0
orbit_velocity = 0.0
orbit_velocity_random = 0.0
scale = 0.25
color = Color( 1, 1, 1, 0.498039 )
color_ramp = SubResource( 6 )

[sub_resource type="Gradient" id=3]
colors = PoolColorArray( 1, 1, 1, 1, 1, 1, 1, 0 )

[sub_resource type="GradientTexture" id=4]
gradient = SubResource( 3 )
width = 2

[sub_resource type="ParticlesMaterial" id=2]
flag_disable_z = true
direction = Vector3( -1, 0, 0 )
gravity = Vector3( 0, 0, 0 )
initial_velocity = 200.0
initial_velocity_random = 0.75
orbit_velocity = 0.0
orbit_velocity_random = 0.0
damping = 100.0
scale = 0.25
color = Color( 1, 1, 1, 0.498039 )
color_ramp = SubResource( 4 )

[sub_resource type="Shader" id=26]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.stable's ParticlesMaterial.

shader_type particles;
uniform vec3 direction;
uniform float spread;
uniform float flatness;
uniform float initial_linear_velocity;
uniform float initial_angle;
uniform float angular_velocity;
uniform float orbit_velocity;
uniform float linear_accel;
uniform float radial_accel;
uniform float tangent_accel;
uniform float damping;
uniform float scale;
uniform float hue_variation;
uniform float anim_speed;
uniform float anim_offset;
uniform float initial_linear_velocity_random;
uniform float initial_angle_random;
uniform float angular_velocity_random;
uniform float orbit_velocity_random;
uniform float linear_accel_random;
uniform float radial_accel_random;
uniform float tangent_accel_random;
uniform float damping_random;
uniform float scale_random;
uniform float hue_variation_random;
uniform float anim_speed_random;
uniform float anim_offset_random;
uniform float lifetime_randomness;
uniform vec4 color_value : hint_color;
uniform int trail_divisor;
uniform vec3 gravity;
uniform sampler2D color_ramp;
uniform sampler2D scale_texture;
uniform sampler2D direction_map;
uniform int amount;


float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

void vertex() {
	uint base_number = NUMBER / uint(trail_divisor);
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	float angle_rand = rand_from_seed(alt_seed);
	float scale_rand = rand_from_seed(alt_seed);
	float hue_rot_rand = rand_from_seed(alt_seed);
	float anim_offset_rand = rand_from_seed(alt_seed);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	bool restart = false;
	float tv = 0.0;
	if (CUSTOM.y > CUSTOM.w) {
		restart = true;
		tv = 1.0;
	}

	if (RESTART || restart) {
		uint alt_restart_seed = hash(base_number + uint(301184) + RANDOM_SEED);
		float tex_linear_velocity = 0.0;
		float tex_angle = 0.0;
		float tex_anim_offset = 0.0;
		float spread_rad = spread * degree_to_rad;
		{
			vec3 real_dir = vec3(texture(direction_map, vec2(float(float(INDEX) / float(amount)), 0.0)).rg, 0.5);
			real_dir = real_dir - vec3(0.5);
			float angle1_rad = rand_from_seed_m1_p1(alt_restart_seed) * spread_rad;
			angle1_rad += real_dir.x != 0.0 ? atan(real_dir.y, real_dir.x) : sign(real_dir.y) * (pi / 2.0);
			vec3 rot = vec3(cos(angle1_rad), sin(angle1_rad), 0.0);
			VELOCITY = rot * initial_linear_velocity * mix(1.0, rand_from_seed(alt_restart_seed), initial_linear_velocity_random);
		}
		float base_angle = (initial_angle + tex_angle) * mix(1.0, angle_rand, initial_angle_random);
		CUSTOM.x = base_angle * degree_to_rad;
		CUSTOM.y = 0.0;
		CUSTOM.w = (1.0 - lifetime_randomness * rand_from_seed(alt_restart_seed));
		CUSTOM.z = (anim_offset + tex_anim_offset) * mix(1.0, anim_offset_rand, anim_offset_random);
		VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
		TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		VELOCITY.z = 0.0;
		TRANSFORM[3].z = 0.0;
	} else {
		CUSTOM.y += DELTA / LIFETIME;
		tv = CUSTOM.y / CUSTOM.w;
		float tex_linear_velocity = 0.0;
		float tex_orbit_velocity = 0.0;
		float tex_angular_velocity = 0.0;
		float tex_linear_accel = 0.0;
		float tex_radial_accel = 0.0;
		float tex_tangent_accel = 0.0;
		float tex_damping = 0.0;
		float tex_angle = 0.0;
		float tex_anim_speed = 0.0;
		float tex_anim_offset = 0.0;
		vec3 force = gravity;
		vec3 pos = TRANSFORM[3].xyz;
		pos.z = 0.0;
		// apply linear acceleration
		force += length(VELOCITY) > 0.0 ? normalize(VELOCITY) * (linear_accel + tex_linear_accel) * mix(1.0, rand_from_seed(alt_seed), linear_accel_random) : vec3(0.0);
		// apply radial acceleration
		vec3 org = EMISSION_TRANSFORM[3].xyz;
		vec3 diff = pos - org;
		force += length(diff) > 0.0 ? normalize(diff) * (radial_accel + tex_radial_accel) * mix(1.0, rand_from_seed(alt_seed), radial_accel_random) : vec3(0.0);
		// apply tangential acceleration;
		force += length(diff.yx) > 0.0 ? vec3(normalize(diff.yx * vec2(-1.0, 1.0)), 0.0) * ((tangent_accel + tex_tangent_accel) * mix(1.0, rand_from_seed(alt_seed), tangent_accel_random)) : vec3(0.0);
		// apply attractor forces
		VELOCITY += force * DELTA;
		// orbit velocity
		float orbit_amount = (orbit_velocity + tex_orbit_velocity) * mix(1.0, rand_from_seed(alt_seed), orbit_velocity_random);
		if (orbit_amount != 0.0) {
		     float ang = orbit_amount * DELTA * pi * 2.0;
		     mat2 rot = mat2(vec2(cos(ang), -sin(ang)), vec2(sin(ang), cos(ang)));
		     TRANSFORM[3].xy -= diff.xy;
		     TRANSFORM[3].xy += rot * diff.xy;
		}
		if (damping + tex_damping > 0.0) {
			float v = length(VELOCITY);
			float damp = (damping + tex_damping) * mix(1.0, rand_from_seed(alt_seed), damping_random);
			v -= damp * DELTA;
			if (v < 0.0) {
				VELOCITY = vec3(0.0);
			} else {
				VELOCITY = normalize(VELOCITY) * v;
			}
		}
		float base_angle = (initial_angle + tex_angle) * mix(1.0, angle_rand, initial_angle_random);
		base_angle += CUSTOM.y * LIFETIME * (angular_velocity + tex_angular_velocity) * mix(1.0, rand_from_seed(alt_seed) * 2.0 - 1.0, angular_velocity_random);
		CUSTOM.x = base_angle * degree_to_rad;
		CUSTOM.z = (anim_offset + tex_anim_offset) * mix(1.0, anim_offset_rand, anim_offset_random) + tv * (anim_speed + tex_anim_speed) * mix(1.0, rand_from_seed(alt_seed), anim_speed_random);
	}
	float tex_scale = textureLod(scale_texture, vec2(tv, 0.0), 0.0).r;
	float tex_hue_variation = 0.0;
	float hue_rot_angle = (hue_variation + tex_hue_variation) * pi * 2.0 * mix(1.0, hue_rot_rand * 2.0 - 1.0, hue_variation_random);
	float hue_rot_c = cos(hue_rot_angle);
	float hue_rot_s = sin(hue_rot_angle);
	mat4 hue_rot_mat = mat4(vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.000, 0.000, 0.000, 1.0)) +
		mat4(vec4(0.701, -0.587, -0.114, 0.0),
			vec4(-0.299, 0.413, -0.114, 0.0),
			vec4(-0.300, -0.588, 0.886, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_c +
		mat4(vec4(0.168, 0.330, -0.497, 0.0),
			vec4(-0.328, 0.035,  0.292, 0.0),
			vec4(1.250, -1.050, -0.203, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_s;
	COLOR = hue_rot_mat * textureLod(color_ramp, vec2(tv, 0.0), 0.0) * color_value;

	TRANSFORM[0] = vec4(cos(CUSTOM.x), -sin(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[1] = vec4(sin(CUSTOM.x), cos(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[2] = vec4(0.0, 0.0, 1.0, 0.0);
	float base_scale = tex_scale * mix(scale, 1.0, scale_random * scale_rand);
	if (base_scale < 0.000001) {
		base_scale = 0.000001;
	}
	TRANSFORM[0].xyz *= base_scale;
	TRANSFORM[1].xyz *= base_scale;
	TRANSFORM[2].xyz *= base_scale;
	VELOCITY.z = 0.0;
	TRANSFORM[3].z = 0.0;
	if (CUSTOM.y > CUSTOM.w) {		ACTIVE = false;
	}
}

"

[sub_resource type="Gradient" id=27]
offsets = PoolRealArray( 0, 0.8, 1 )
colors = PoolColorArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 )

[sub_resource type="GradientTexture" id=28]
gradient = SubResource( 27 )
width = 2

[sub_resource type="Curve" id=29]
_data = [ Vector2( 0, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 0 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=30]
width = 32
curve = SubResource( 29 )

[sub_resource type="ShaderMaterial" id=31]
shader = SubResource( 26 )
shader_param/direction = Vector3( 1, 0, 0 )
shader_param/spread = 0.0
shader_param/flatness = 0.0
shader_param/initial_linear_velocity = 500.0
shader_param/initial_angle = 0.0
shader_param/angular_velocity = 0.0
shader_param/orbit_velocity = 0.0
shader_param/linear_accel = -1000.0
shader_param/radial_accel = 0.0
shader_param/tangent_accel = 0.0
shader_param/damping = 0.0
shader_param/scale = 1.0
shader_param/hue_variation = 0.0
shader_param/anim_speed = 0.0
shader_param/anim_offset = 0.0
shader_param/initial_linear_velocity_random = 0.0
shader_param/initial_angle_random = 0.0
shader_param/angular_velocity_random = 0.0
shader_param/orbit_velocity_random = 0.0
shader_param/linear_accel_random = 0.0
shader_param/radial_accel_random = 0.0
shader_param/tangent_accel_random = 0.0
shader_param/damping_random = 0.0
shader_param/scale_random = 0.0
shader_param/hue_variation_random = 0.0
shader_param/anim_speed_random = 0.0
shader_param/anim_offset_random = 0.0
shader_param/lifetime_randomness = 0.0
shader_param/color_value = Color( 1, 1, 1, 1 )
shader_param/trail_divisor = 1
shader_param/gravity = Vector3( 0, -1e-06, 0 )
shader_param/amount = 8
shader_param/color_ramp = SubResource( 28 )
shader_param/scale_texture = SubResource( 30 )
shader_param/direction_map = ExtResource( 9 )

[sub_resource type="Gradient" id=24]
offsets = PoolRealArray( 0.99999, 1 )
colors = PoolColorArray( 1, 1, 1, 1, 1, 1, 1, 0 )

[sub_resource type="GradientTexture2D" id=25]
gradient = SubResource( 24 )
width = 32
height = 32
fill = 1
fill_from = Vector2( 0.5, 0.5 )
fill_to = Vector2( 1, 0.5 )

[sub_resource type="RectangleShape2D" id=17]
extents = Vector2( 16, 16 )

[node name="Player" type="Area2D"]
collision_layer = 2
script = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 1 )

[node name="DashCircle" type="Sprite" parent="."]
modulate = Color( 0, 0, 1, 1 )
material = SubResource( 11 )
z_index = -1
texture = SubResource( 9 )

[node name="MercyCircle" type="Sprite" parent="."]
modulate = Color( 1, 0, 1, 1 )
material = SubResource( 21 )
texture = ExtResource( 7 )

[node name="Sprites" type="Node2D" parent="."]

[node name="InsideSprite" type="Sprite" parent="Sprites"]
texture = ExtResource( 5 )

[node name="WhiteSprite" type="Sprite" parent="Sprites"]
material = ExtResource( 3 )

[node name="BaseSprite" type="Sprite" parent="Sprites"]
material = SubResource( 16 )
texture = ExtResource( 2 )

[node name="DriftLight" type="Sprite" parent="."]
visible = false
texture = SubResource( 19 )

[node name="Help" type="Label" parent="DriftLight"]
anchor_left = 0.5
anchor_right = 0.5
margin_left = -30.5
margin_top = -16.0
margin_right = 0.5
margin_bottom = -4.0
custom_fonts/font = SubResource( 32 )
text = "help!"
align = 1
valign = 1

[node name="BreakParti" type="Particles2D" parent="."]
emitting = false
amount = 48
one_shot = true
explosiveness = 1.0
local_coords = false
process_material = SubResource( 12 )
texture = ExtResource( 2 )

[node name="MoveParti" type="Particles2D" parent="."]
emitting = false
lifetime = 0.5
randomness = 0.25
local_coords = false
process_material = SubResource( 7 )
texture = ExtResource( 2 )

[node name="DashBurst" type="Particles2D" parent="."]
emitting = false
amount = 32
lifetime = 0.8
one_shot = true
explosiveness = 1.0
local_coords = false
process_material = SubResource( 2 )
texture = ExtResource( 2 )
__meta__ = {
"_editor_description_": "Particle for when you dash"
}

[node name="DashBurst2" type="Particles2D" parent="."]
emitting = false
amount = 32
lifetime = 0.8
one_shot = true
explosiveness = 1.0
local_coords = false
process_material = SubResource( 2 )
texture = ExtResource( 2 )
__meta__ = {
"_editor_description_": "Another one"
}

[node name="DieParti" type="Particles2D" parent="."]
pause_mode = 2
emitting = false
lifetime = 0.5
one_shot = true
explosiveness = 1.0
local_coords = false
process_material = SubResource( 31 )
texture = SubResource( 25 )

[node name="RescueArea" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 0
script = ExtResource( 6 )
__meta__ = {
"_editor_description_": "Checks if someone rescues it
Bit 2 is for rescuing"
}

[node name="CollisionShape2D" type="CollisionShape2D" parent="RescueArea"]
shape = SubResource( 17 )

[connection signal="area_shape_entered" from="." to="." method="_on_Player_area_shape_entered"]
[connection signal="area_shape_exited" from="." to="." method="_on_Player_area_shape_exited"]
[connection signal="area_entered" from="RescueArea" to="." method="_on_RescueArea_area_entered"]
